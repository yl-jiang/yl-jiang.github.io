<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ - Object-Based Programming</title>
      <link href="/2020/03/27/ji-yu-dui-xiang-de-bian-cheng-feng-ge/"/>
      <url>/2020/03/27/ji-yu-dui-xiang-de-bian-cheng-feng-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="Essential-C-Chapter3-Chapter-4-Object-Based-Programming"><a href="#Essential-C-Chapter3-Chapter-4-Object-Based-Programming" class="headerlink" title="Essential C++ Chapter3 Chapter 4 : Object-Based Programming"></a>Essential C++ Chapter3 Chapter 4 : Object-Based Programming</h1><h2 id="class的定义"><a href="#class的定义" class="headerlink" title="class的定义"></a>class的定义</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">// 一下这些函数只是声明</span>        <span class="token keyword">bool</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token function">pop</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token function">peek</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token function">full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token function">findit</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">countit</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// size函数定义在class之内</span>        <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span><span class="token operator">:</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> _stack<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Stack<span class="token operator">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> _stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Stack<span class="token operator">::</span><span class="token function">pop</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// empty()必须再调用之前已经被定义</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    elem <span class="token operator">=</span> _stack<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _stack<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Stack<span class="token operator">::</span><span class="token function">full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> _stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> _stack<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Stack<span class="token operator">::</span><span class="token function">peek</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    elem <span class="token operator">=</span> _stack<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Stack<span class="token operator">::</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    _stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Stack<span class="token operator">::</span><span class="token function">findit</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>_stack<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _stack<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span> <span class="token operator">!=</span> _stack<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> Stack<span class="token operator">::</span><span class="token function">countit</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>_stack<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _stack<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>member function都必须在<code>class</code>主体内进行<strong>声明</strong></li><li>可以直接在<code>class</code>主体内定义member function，就像函数<code>size()</code>一样</li><li>也可以在<code>class</code>主体外定义函数，只是需要注意：<ul><li>当把<code>class</code>主体和member function都放在”.h”文件内时，member可以使用<code>inline</code>的形式定义，即：<code>inline classname::functionname</code></li><li>当要使用non-inline的形式定义member function，那么该member function建议定义在程序文件，即：<code>.cpp</code>中</li></ul></li><li>在<code>class</code>主体之外声明的member可以选择使用[或者不使用]inline function形式，例如：empty()函数使用inline方式，而full()函数则没有使用</li></ul><h2 id="class-object的使用"><a href="#class-object的使用" class="headerlink" title="class object的使用"></a>class object的使用</h2><p>我们一般将class的定义放在一个<code>'.h'</code>的文件中，例如我们把上面这段程序命名为<code>'stack.h'</code>，并在同一目录下新建一个<code>'stack.cpp'</code>的包含<code>main()</code>函数的程序文件：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stack.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack stack<span class="token punctuation">;</span>    string str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"word"</span><span class="token punctuation">,</span> <span class="token string">"how"</span><span class="token punctuation">,</span> <span class="token string">"are"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    string tmp<span class="token punctuation">;</span>    string find_str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"push word : "</span> <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" in stack"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">findit</span><span class="token punctuation">(</span>find_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" find it!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"word # "</span> <span class="token operator">&lt;&lt;</span> find_str <span class="token operator">&lt;&lt;</span> <span class="token string">" occur : "</span> <span class="token operator">&lt;&lt;</span> stack<span class="token punctuation">.</span><span class="token function">countit</span><span class="token punctuation">(</span>find_str<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" times"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="class-object的初始化"><a href="#class-object的初始化" class="headerlink" title="class object的初始化"></a>class object的初始化</h2><h3 id="通过构造函数-constructors"><a href="#通过构造函数-constructors" class="headerlink" title="通过构造函数(constructors)"></a>通过构造函数(constructors)</h3><p><strong><code>'somename.h'</code></strong>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// default constructors</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> beg_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _beg_pos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _length<span class="token punctuation">;</span>        <span class="token keyword">int</span> _beg_pos<span class="token punctuation">;</span>        <span class="token keyword">int</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> beg_pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> beg_pos <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> beg_pos <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> beg_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong><code>'somename.cpp'</code></strong>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"somename.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular obj_1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"_length = "</span> <span class="token operator">&lt;&lt;</span> obj_1<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj_1<span class="token punctuation">.</span><span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _next = "</span> <span class="token operator">&lt;&lt;</span> obj_1<span class="token punctuation">.</span><span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangular <span class="token function">obj_2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_length = "</span> <span class="token operator">&lt;&lt;</span> obj_2<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj_2<span class="token punctuation">.</span><span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _next = "</span> <span class="token operator">&lt;&lt;</span> obj_2<span class="token punctuation">.</span><span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangular <span class="token function">obj_3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_length = "</span> <span class="token operator">&lt;&lt;</span> obj_3<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj_3<span class="token punctuation">.</span><span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _next = "</span> <span class="token operator">&lt;&lt;</span> obj_3<span class="token punctuation">.</span><span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="通过成员初始化列表"><a href="#通过成员初始化列表" class="headerlink" title="通过成员初始化列表"></a>通过成员初始化列表</h3><p><strong><code>'somename.h'</code></strong>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_length</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_beg_pos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// default constructors</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_length</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span> _beg_pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> _next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> beg_pos<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_length</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_beg_pos</span><span class="token punctuation">(</span>beg_pos<span class="token punctuation">)</span> <span class="token punctuation">{</span> _next <span class="token operator">=</span> _beg_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _beg_pos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _length<span class="token punctuation">;</span>        <span class="token keyword">int</span> _beg_pos<span class="token punctuation">;</span>        <span class="token keyword">int</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>'somename.cpp'</code>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"somename.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular obj_1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"_length = "</span> <span class="token operator">&lt;&lt;</span> obj_1<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj_1<span class="token punctuation">.</span><span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _next = "</span> <span class="token operator">&lt;&lt;</span> obj_1<span class="token punctuation">.</span><span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangular <span class="token function">obj_2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_length = "</span> <span class="token operator">&lt;&lt;</span> obj_2<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj_2<span class="token punctuation">.</span><span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _next = "</span> <span class="token operator">&lt;&lt;</span> obj_2<span class="token punctuation">.</span><span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangular <span class="token function">obj_3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_length = "</span> <span class="token operator">&lt;&lt;</span> obj_3<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj_3<span class="token punctuation">.</span><span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">" _next = "</span> <span class="token operator">&lt;&lt;</span> obj_3<span class="token punctuation">.</span><span class="token function">get_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="const-member-fuction"><a href="#const-member-fuction" class="headerlink" title="const member fuction"></a>const member fuction</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">// class initilization</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">_length</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_beg_pos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//const member function</span>        <span class="token keyword">int</span> <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _length<span class="token punctuation">;</span>        <span class="token keyword">int</span> _beg_pos<span class="token punctuation">;</span>        <span class="token keyword">int</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class initilization funtion</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> pos <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> pos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const member function</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _beg_pos<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"_length = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_next = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>被定义为<code>const</code>的member function在class object被初始化后不会更改<code>class object</code>中<code>private</code>内定义的各<code>data member</code>。</p><p>如果上面的<code>class</code>有一个member function定义如下的话，是无法通过编译的：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">next_plus_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">++</span>_next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误，const member function是不能修改class object的</span>        <span class="token punctuation">}</span></code></pre><h2 id="Mutable-Data-Member"><a href="#Mutable-Data-Member" class="headerlink" title="Mutable Data Member"></a>Mutable Data Member</h2><p><strong>定义为可变数据成员的变量(关键字为: <code>mutable</code>)，对其进行的修改不会破坏<code>class object</code>的常量性。</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">// class initilization</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">_length</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_beg_pos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//const member function</span>        <span class="token keyword">int</span> <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">next_plus_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">++</span>_next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 虽然该函数为const function member，但是它可以修改private中定义的_next</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _length<span class="token punctuation">;</span>        <span class="token keyword">int</span> _beg_pos<span class="token punctuation">;</span>        <span class="token keyword">mutable</span> <span class="token keyword">int</span> _next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 此处定义_next为可变数据成员</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class initilization funtion</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> pos <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> pos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const member function</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _beg_pos<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"_length = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_next = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nnew_next = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">next_plus_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="static-data-member"><a href="#static-data-member" class="headerlink" title="static data member"></a>static data member</h2><p><code>static</code>成员变量属于类，不属于某个具体的对象，即使创建多个对象，也只为<code>static</code>成员变量分配一份内存，所有对象使用的都是这份内存中的数据。当某个对象修改了该<code>static</code>成员变量，也会影响到其他对象。</p><p>静态成员属于全局变量，是所有实例化以后的对象所共享的，显然这种共有对象，不能在任何函数和局部作用域中初始化。</p><h3 id="static-data-member的初始化和简单使用："><a href="#static-data-member的初始化和简单使用：" class="headerlink" title="static data member的初始化和简单使用："></a><code>static data member</code>的初始化和简单使用：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">// class initialization</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//const member function</span>        <span class="token keyword">int</span> <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">set_static_member</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            static_int <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_static_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> static_int<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _length<span class="token punctuation">;</span>        <span class="token keyword">int</span> _beg_pos<span class="token punctuation">;</span>        <span class="token keyword">int</span> _next<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> static_int<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// constructor functions</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> pos <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> pos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// define const member function out of class</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _beg_pos<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// initialize static data member </span><span class="token keyword">int</span> Triangular<span class="token operator">::</span>static_int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span><span class="token function">set_static_member</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"obj_static_value = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_static_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Triangular obj_2<span class="token punctuation">;</span>    obj_2<span class="token punctuation">.</span><span class="token function">set_static_member</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"obj_2_static_value = "</span> <span class="token operator">&lt;&lt;</span> obj_2<span class="token punctuation">.</span><span class="token function">get_static_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="static-member-function"><a href="#static-member-function" class="headerlink" title="static member function"></a>static member function</h2><p>那些不访问任何<code>non-static member</code>的member function才可以被声明为<code>static</code>，声明方式为在之前加上关键字<code>static</code>。当我们在<code>class</code>主体外部对<code>static member function</code>进行定义时，无需重复加上关键字<code>static</code>(该规则同样适用于<code>static data member</code>)。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">is_elem</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gen_elems</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gen_elems_to_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> beg_pos<span class="token punctuation">,</span> ostream <span class="token operator">&amp;</span>os <span class="token operator">=</span> cout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> _max_elems <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> _elems<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在class外部对static data member进行定义时可以不加static关键字</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Triangular<span class="token operator">::</span>_elems<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// the member function declared as static in class, you do not need to add the 'static' keyword when you define the member function out of class</span><span class="token keyword">void</span> Triangular<span class="token operator">::</span><span class="token function">gen_elems_to_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ix <span class="token operator">=</span> _elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ix <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>_elems<span class="token punctuation">[</span>ix <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> val <span class="token operator">&amp;&amp;</span> ix <span class="token operator">&lt;</span> _max_elems<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"elems to value: "</span> <span class="token operator">&lt;&lt;</span> ix <span class="token operator">*</span> <span class="token punctuation">(</span>ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token operator">++</span>ix<span class="token punctuation">;</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ix <span class="token operator">*</span> <span class="token punctuation">(</span>ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ix <span class="token operator">==</span> _max_elems<span class="token punctuation">)</span><span class="token punctuation">{</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Triangular Sequence: oops: value too large"</span>             <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" -- exceeds max size of "</span>             <span class="token operator">&lt;&lt;</span> _max_elems <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Triangular<span class="token operator">::</span><span class="token function">is_elem</span><span class="token punctuation">(</span><span class="token keyword">int</span> elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> _elems<span class="token punctuation">[</span>_elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> elem<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">gen_elems_to_value</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator found_it<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator end_it <span class="token operator">=</span> _elems<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    found_it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>_elems<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end_it<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> found_it <span class="token operator">!=</span> end_it<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Triangular<span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> beg_pos<span class="token punctuation">,</span> ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ix <span class="token operator">=</span> _elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ix <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>ix<span class="token punctuation">;</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ix <span class="token operator">*</span> <span class="token punctuation">(</span>ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ix <span class="token operator">></span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        _elems<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span>ix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beg_pos <span class="token operator">></span> length<span class="token punctuation">)</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"param 'beg_pos' should less than param 'length'"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> beg_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        os <span class="token operator">&lt;&lt;</span> _elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    os <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Triangular<span class="token operator">::</span><span class="token function">is_elem</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 调用static member function</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"the value: "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" in the Triangular"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"the value: "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" not in the Triangular"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Triangular<span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 调用static member function</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一般地，在调用<code>non-static member function</code>时那样，必须先定义一个该<code>class</code>的实例，然后再通过实例去调用类里面的函数。而调用<code>static member function</code>，只需在<code>static member function</code>前加上<code>class scope</code>就可以直接调用该函数。</p><hr><h2 id="有关class的初始化注意事项"><a href="#有关class的初始化注意事项" class="headerlink" title="有关class的初始化注意事项"></a>有关class的初始化注意事项</h2><h3 id="初始化位置"><a href="#初始化位置" class="headerlink" title="初始化位置"></a>初始化位置</h3><p>一般都是类内声明，类外初始化，因为静态成员属于整个类，而不属于某个对象，如果在类内初始化，会导致每个对象都包含该静态成员，这是矛盾的。不过，静态常量成员是可以在类内声明的：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，静态成员不能在类内初始化</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，常量成员也不能在类内初始化</span>        <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span><span class="token punctuation">}</span></code></pre><h3 id="初始化列表初始顺序"><a href="#初始化列表初始顺序" class="headerlink" title="初始化列表初始顺序"></a>初始化列表初始顺序</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_j</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_i</span><span class="token punctuation">(</span>m_j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_j</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_i</span><span class="token punctuation">(</span>m_j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get_i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get_j</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_i<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Base <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_j</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出为:一个随机数和数字98。</p><p>为什么呢？因为对于初始化列表而言，对成员变量的初始化，是<strong>严格按照声明次序<code>(private</code>部分)</strong>，而不是在初始化列表中的顺序进行初始化，如果改为赋值初始化则不会出现这个问题，当然，为了使用初始化列表，还是严格注意声明顺序吧，比如先声明数组大小，再声明数组这样。</p><p><a href="https://blog.csdn.net/coder_xia/article/details/7447822" target="_blank" rel="noopener">原文链接</a></p><hr><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><p><code>this</code>指针在<code>member function</code>中用来指向其调用者的一切。</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p>使用一个已经初始化的<code>class object</code>去初始化另一个<code>class object</code>：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">// class initilization</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">_length</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_beg_pos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//const member function</span>        <span class="token keyword">int</span> <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        Triangular <span class="token operator">&amp;</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangular <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _length<span class="token punctuation">;</span>        <span class="token keyword">int</span> _beg_pos<span class="token punctuation">;</span>        <span class="token keyword">int</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class initilization funtion</span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> pos <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> pos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _next <span class="token operator">=</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const member function</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _beg_pos<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Triangular<span class="token operator">::</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _next<span class="token punctuation">;</span><span class="token punctuation">}</span>Triangular<span class="token operator">&amp;</span> Triangular<span class="token operator">::</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangular <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// this指针代表整个新创建的class object</span>        _length <span class="token operator">=</span> rhs<span class="token punctuation">.</span>_length<span class="token punctuation">;</span>        _beg_pos <span class="token operator">=</span> rhs<span class="token punctuation">.</span>_beg_pos<span class="token punctuation">;</span>        _next <span class="token operator">=</span> rhs<span class="token punctuation">.</span>_next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"_length = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\n_next = "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Triangular obj_copy <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"obj_copy_length = "</span> <span class="token operator">&lt;&lt;</span> obj_copy<span class="token punctuation">.</span><span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\nobj_copy_beg_pos = "</span> <span class="token operator">&lt;&lt;</span> obj_copy<span class="token punctuation">.</span><span class="token function">get_cur_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"\nobj_copy_next = "</span> <span class="token operator">&lt;&lt;</span> obj_copy<span class="token punctuation">.</span><span class="token function">get_next_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="Iterator-Class"><a href="#Iterator-Class" class="headerlink" title="Iterator Class"></a>Iterator Class</h2><p>重载运算符：</p><p><code>'iterator_class.h'</code>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangular_iterator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">Triangular_iterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">_index</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangular_iterator <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangular_iterator <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        Triangular_iterator <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prefix</span>        Triangular_iterator <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// postfix</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _index<span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">check_integrity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #################################################################################</span><span class="token keyword">class</span> <span class="token class-name">Triangular</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// friend int Triangular_iterator::operator*() const;</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Triangular_iterator</span><span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">typedef</span> Triangular_iterator iterator<span class="token punctuation">;</span>        Triangular_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Triangular_iterator</span><span class="token punctuation">(</span>_beg_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 会调用class Triangular_iterator的初始化constructors</span>        <span class="token punctuation">}</span>        Triangular_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Triangular_iterator</span><span class="token punctuation">(</span>_beg_pos <span class="token operator">+</span> _length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 会调用class Triangular_iterator的初始化constructors</span>        <span class="token punctuation">}</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">_beg_pos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_length</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> bp<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">_beg_pos</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_length</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">is_elem</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gen_elems</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gen_elems_to_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> beg_pos<span class="token punctuation">,</span> ostream <span class="token operator">&amp;</span>os <span class="token operator">=</span> cout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max_elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> _max_elems<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// for print in the consol</span>        <span class="token keyword">int</span> <span class="token function">beg_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> _beg_pos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _beg_pos<span class="token punctuation">;</span>        <span class="token keyword">int</span> _length<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> _max_elems <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> _elems<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #################################################################################</span><span class="token comment" spellcheck="true">// class Triangular initialization </span>Triangular<span class="token operator">::</span><span class="token function">Triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    _length <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    _beg_pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">gen_elems</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在class外部对static data member进行定义时可以不加static关键字</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Triangular<span class="token operator">::</span>_elems<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// the member function declared as static in class, you do not need to add the 'static' keyword when you define the member function out of class</span><span class="token keyword">void</span> Triangular<span class="token operator">::</span><span class="token function">gen_elems_to_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ix <span class="token operator">=</span> _elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ix <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>_elems<span class="token punctuation">[</span>ix <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> val <span class="token operator">&amp;&amp;</span> ix <span class="token operator">&lt;</span> _max_elems<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"elems to value: "</span> <span class="token operator">&lt;&lt;</span> ix <span class="token operator">*</span> <span class="token punctuation">(</span>ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token operator">++</span>ix<span class="token punctuation">;</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ix <span class="token operator">*</span> <span class="token punctuation">(</span>ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ix <span class="token operator">==</span> _max_elems<span class="token punctuation">)</span><span class="token punctuation">{</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Triangular Sequence: oops: value too large"</span>             <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" -- exceeds max size of "</span>             <span class="token operator">&lt;&lt;</span> _max_elems <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Triangular<span class="token operator">::</span><span class="token function">is_elem</span><span class="token punctuation">(</span><span class="token keyword">int</span> elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> _elems<span class="token punctuation">[</span>_elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> elem<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">gen_elems_to_value</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator found_it<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator end_it <span class="token operator">=</span> _elems<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    found_it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>_elems<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end_it<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> found_it <span class="token operator">!=</span> end_it<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Triangular<span class="token operator">::</span><span class="token function">gen_elems</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ix <span class="token operator">=</span> _elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ix <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>ix<span class="token punctuation">;</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ix <span class="token operator">*</span> <span class="token punctuation">(</span>ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Triangular<span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> beg_pos<span class="token punctuation">,</span> ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ix <span class="token operator">=</span> _elems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ix <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>ix<span class="token punctuation">;</span>        _elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ix <span class="token operator">*</span> <span class="token punctuation">(</span>ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ix <span class="token operator">></span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        _elems<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span>ix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beg_pos <span class="token operator">></span> length<span class="token punctuation">)</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"param 'beg_pos' should less than param 'length'"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> beg_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        os <span class="token operator">&lt;&lt;</span> _elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    os <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// #################################################################################</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Triangular_iterator<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangular_iterator <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> _index <span class="token operator">==</span> rhs<span class="token punctuation">.</span>_index<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> Triangular_iterator<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// check_integrity();</span>    <span class="token keyword">return</span> Triangular<span class="token operator">::</span>_elems<span class="token punctuation">[</span>_index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> Triangular_iterator<span class="token operator">&amp;</span> Triangular_iterator<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">++</span>_index<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check_integrity();</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回的是指向class Triangular_iterator的地址，只是该class object的_index有了变化</span><span class="token punctuation">}</span><span class="token keyword">inline</span> Triangular_iterator Triangular_iterator<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular_iterator tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">++</span>_index<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check_integrity();</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> Triangular_iterator<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangular_iterator <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//#############################################################################</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> Triangular <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>    os <span class="token operator">&lt;&lt;</span> <span class="token string">"Triangular("</span> <span class="token operator">&lt;&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" ,"</span> <span class="token operator">&lt;&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">beg_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span>    rhs<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">beg_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>friend:任何class都可以将其它function和class指定为friend，被声明为friend的对象具备了与class member function相同的访问权限，可以访问class的private member。【例如本例的，Triangular_iterator具备访问class Triangular的所有private member的权限】</li><li>typedef：用来将某个类型设定另一个不同的名称。【例如本例中，在class Triangular中将Triangular_iterator定义了另一个名称为iterator 】</li></ul><p><code>'iterator_class.cpp'</code>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"iterator_class.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Triangular <span class="token function">tri</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangular<span class="token operator">::</span>iterator it <span class="token operator">=</span> tri<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangular<span class="token operator">::</span>iterator end_it <span class="token operator">=</span> tri<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Triangular Series of "</span> <span class="token operator">&lt;&lt;</span> tri<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" elements: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> tri <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> end_it<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token operator">++</span>it<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="自定义function-object"><a href="#自定义function-object" class="headerlink" title="自定义function object"></a>自定义function object</h2><p><strong><code>function object</code>为“提供了<code>function call</code>(即‘operator()’ memberfunction)”运算符的<code>class</code>。</strong>【相当于Python中实现了<code>__call__()</code>方法的class】</p><h3 id="栗子：定义一个提供了function-call运算符的class"><a href="#栗子：定义一个提供了function-call运算符的class" class="headerlink" title="栗子：定义一个提供了function call运算符的class"></a>栗子：定义一个提供了function call运算符的<code>class</code></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LessThan</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">LessThan</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">_val</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">comp_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _val<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">comp_val</span><span class="token punctuation">(</span><span class="token keyword">int</span> nval<span class="token punctuation">)</span> <span class="token punctuation">{</span> _val <span class="token operator">=</span> nval<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> _value<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 相当于实现Python中的__call__()方法</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> _val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面的代码就自定义了一个<code>function object</code>：<code>LessThan</code></p><p>使用自定义<code>function object</code>的一般形式：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//  一般情况下使用自定义的function object</span><span class="token keyword">bool</span> LessThan<span class="token operator">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> val <span class="token operator">&lt;</span> _val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">count_less_than</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">,</span> <span class="token keyword">int</span> comp<span class="token punctuation">)</span><span class="token punctuation">{</span>    LessThan <span class="token function">lt</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明一个自定义的function object</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>const_iterator iter <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用自定义的function object</span>            <span class="token operator">++</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>更常用的情况是，我们将<code>function object</code>作为一个参数传给泛型算法：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//  把自定义的function object当作function的参数</span><span class="token keyword">void</span> <span class="token function">print_less_than</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">,</span> <span class="token keyword">int</span> comp_val<span class="token punctuation">,</span> ostream <span class="token operator">&amp;</span>os<span class="token operator">=</span>cout<span class="token punctuation">)</span><span class="token punctuation">{</span>    LessThan <span class="token function">lt</span><span class="token punctuation">(</span>comp_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>const_iterator iter <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>const_iterator iter_end <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    os <span class="token operator">&lt;&lt;</span> <span class="token string">"elements less than "</span> <span class="token operator">&lt;&lt;</span> lt<span class="token punctuation">.</span><span class="token function">comp_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iter <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> iter_end<span class="token punctuation">,</span> lt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> iter_end<span class="token punctuation">)</span><span class="token punctuation">{</span>        os <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token operator">++</span>iter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>验证上面的程序：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>ia<span class="token punctuation">,</span> ia <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> comp_val <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Number of elements less than "</span> <span class="token operator">&lt;&lt;</span> comp_val <span class="token operator">&lt;&lt;</span> <span class="token string">" are"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">count_less_than</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> comp_val<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">print_less_than</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> comp_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="重载iostream运算符"><a href="#重载iostream运算符" class="headerlink" title="重载iostream运算符"></a>重载iostream运算符</h2><p>重载该运算符，以实现对某个class object的读取和写入操作。【相当于Python中实现了<code>__repr__()</code>方法的class】</p><pre class=" language-cpp"><code class="language-cpp">ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> Triangular <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>    os <span class="token operator">&lt;&lt;</span> <span class="token string">"Triangular("</span> <span class="token operator">&lt;&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" ,"</span> <span class="token operator">&lt;&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">beg_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span>    rhs<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">beg_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将传入的ostream又原封不动的返回，这样可以串接多个output运算符。传入的ostream并没有声明为const，因为每个output都会对ostream对象的内部状态进行修改。</p><h3 id="为什么不把output运算设计为一个member-function？"><a href="#为什么不把output运算设计为一个member-function？" class="headerlink" title="为什么不把output运算设计为一个member function？"></a>为什么不把output运算设计为一个member function？</h3><p>因为作为一个member function，其左操作数必须是隶属于同一个class的对象。如果在上面的栗子中，output被设计为一个member function：</p><pre class=" language-cpp"><code class="language-cpp">Triangular <span class="token function">tri</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出tri</span>tri <span class="token operator">&lt;&lt;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 其中'tri &lt;&lt;'会调用‘operator &lt;&lt;()'函数</span></code></pre><h2 id="指向member-function的指针"><a href="#指向member-function的指针" class="headerlink" title="指向member function的指针"></a>指向member function的指针</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">num_sequence</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span>num_sequence<span class="token operator">::</span><span class="token operator">*</span>PtrType<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">pell</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">lucas</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">triangular</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">sequare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">private</span><span class="token operator">:</span>        PtrType _pmf<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>PtrType</code>声明为一个指针，指向<code>num_sequence</code>的member function，后者的返回类型是<code>void</code>，只接受一个<code>int</code>参数。</p><h3 id="member-function的调用"><a href="#member-function的调用" class="headerlink" title="member function的调用"></a>member function的调用</h3><pre class=" language-cpp"><code class="language-cpp">num_sequence ns<span class="token punctuation">;</span>num_sequence <span class="token operator">*</span>pns <span class="token operator">=</span> <span class="token operator">&amp;</span>ns<span class="token punctuation">;</span></code></pre><p>假设num_sequence拥有member function pm，调用该function可以有以下两种方法：</p><ul><li><code>ns.pm(pos);</code></li><li><code>pns-&gt;pm(pos);</code></li></ul><p>直接定义一个类对象ns，调用member function使用<code>：'.'</code>。定义一个指向类对象的指针，调用member function使用：<code>'-&gt;'</code>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++, Essential C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Essential C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - Generic Programming</title>
      <link href="/2020/03/27/fan-xing-bian-cheng-feng-ge/"/>
      <url>/2020/03/27/fan-xing-bian-cheng-feng-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="Essential-C-Chapter3-Generic-Programming"><a href="#Essential-C-Chapter3-Generic-Programming" class="headerlink" title="Essential C++ Chapter3: Generic Programming"></a>Essential C++ Chapter3: Generic Programming</h1><h2 id="Standard-Template-Library-STL"><a href="#Standard-Template-Library-STL" class="headerlink" title="Standard Template Library(STL)"></a>Standard Template Library(STL)</h2><p>STL主要包括两部分：</p><ol><li>容器</li><li>操作容器的泛型算法</li></ol><hr><h2 id="容器-container-："><a href="#容器-container-：" class="headerlink" title="容器(container)："></a>容器(container)：</h2><ol><li>vector; // 顺序容器(sequential container)</li><li>list;  // 顺序容器</li><li>deque;  // 顺序容器</li><li>set;  // 关联容器(associative container)</li><li>map;  // 关联容器</li><li>…</li></ol><p>顺序类容器用来维护一组排列有序，类型相同的元素。</p><p>关联容器可以让我们快速查找容器中的元素值。</p><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a><strong>vector</strong></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span></code></pre><p>vector以一段连续内存来存放，因此对vector进行元素的访问和提取很有效率，但是将元素插入vector和从vector中删除元素(<strong>除了对最后一个元素进行删除和在最后面的位置进行插入外</strong>)则效率很低。因为插入/删除位置右端的所有元素都必须被复制一份，并依次右移/左移。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a><strong>list</strong></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;list></span></span></code></pre><p>list以双向链表(double-linked)而非连续内存来存储内容，因此可以执行前今后后退操作。list中的每一个元素都包含三个字段：value、back指针、front指针，因此在list中的任意位置进行元素的插入或者删除操作，都颇有效率。但是对list进行随机访问操作，则效率不高。</p><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a><strong>deque</strong></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;deque></span></span></code></pre><p>已连续内存存储元素，与vector不同的是，deque对于最前端(和最后端)元素的插入和删除操作效率都较高。</p><h3 id="用以操作这些容器的所谓泛型算法-generic-algorithm-："><a href="#用以操作这些容器的所谓泛型算法-generic-algorithm-：" class="headerlink" title="用以操作这些容器的所谓泛型算法(generic algorithm)："></a>用以操作这些容器的所谓泛型算法(generic algorithm)：</h3><ol><li>find();</li><li>sort();</li><li>replace();</li><li>merge();</li><li>…</li></ol><hr><h2 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span></code></pre><p>泛型算法提供了许多<strong>可用于容器类以及数组类型上的操作。</strong>这些算法称为<strong>泛型</strong>，之所以称它们为泛型，是因为它们和它们想要操作的元素类型(容器类)无关。</p><p>实现“与容器无关”的诀窍，就是不要直接在容器身上操作。而是借由一对iterator(first和last)，标示我们要进行迭代的元素范围。</p><h3 id="泛型算法种类："><a href="#泛型算法种类：" class="headerlink" title="泛型算法种类："></a>泛型算法种类：</h3><ul><li>搜索(search)算法<ul><li><code>find()</code> : 用于搜索无序集合中是否存在某个值，搜索范围由<code>iterator[first, last)</code>  标出</li><li><code>binary_search()</code> : 用于有序集合的搜索，如果搜索到目标就返回true，否则返回false</li><li><code>count()</code> : 返回查询的元素个数</li><li><code>search()</code> : 比对某个容器内是否存在某个子序列，如果存在，返回一个iterator指向子序列的起始处</li></ul></li><li>排序(sorting)以及次序整理(ordering)算法</li><li>复制(copy)、删除(delete)、替换(substitution)算法</li><li>关系(relational)算法</li><li>生成(generation)与质变(mutation)算法</li><li>数值(numeric)算法</li><li>集合(set)算法</li></ul><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;list></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">less_than</span><span class="token punctuation">(</span><span class="token keyword">int</span> val_1<span class="token punctuation">,</span> <span class="token keyword">int</span> val_2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> val_1 <span class="token operator">&lt;</span> val_2 <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">greater_than</span><span class="token punctuation">(</span><span class="token keyword">int</span> val_1<span class="token punctuation">,</span> <span class="token keyword">int</span> val_2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> val_1 <span class="token operator">></span> val_2 <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>T arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// filter_ver1()就是所谓的泛型算法：传入的函数“pred()”不关心容器的类型</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">filter_ver1</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">,</span> <span class="token keyword">int</span> filter_val<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>pred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nvec<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pred</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">,</span> filter_val<span class="token punctuation">)</span><span class="token punctuation">)</span>            nvec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nvec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span><span class="token function">filter_ver1</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> value<span class="token punctuation">,</span> less_than<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span><span class="token function">filter_ver1</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> value<span class="token punctuation">,</span> greater_than<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="泛型指针-Iterator"><a href="#泛型指针-Iterator" class="headerlink" title="泛型指针(Iterator)"></a>泛型指针(Iterator)</h2><p>底层指针行为之上的一层抽象。</p><ul><li>解决的痛点：<ul><li>虽然<code>list</code>和<code>vector</code>都为容器对象，我们可以对<code>vector object</code>进行指针的算数运算，而不能使用指针的算术运算对<code>list</code>中的元素进行操作。</li></ul></li><li>Iterator具有的常规操作：<ul><li>++</li><li>*</li><li>==</li><li>!=</li><li>等等</li></ul></li><li>定义</li></ul><pre class=" language-cpp"><code class="language-cpp">    string sa<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">svec</span><span class="token punctuation">(</span>sa<span class="token punctuation">,</span> sa <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> svec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">// 定义一个iterator 'iter'，该iterator指向一个元素类型为string的vector的第一个元素</span>    <span class="token keyword">const</span> string sa_cnt<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">svec_cnt</span><span class="token punctuation">(</span>sa_cnt<span class="token punctuation">,</span> sa_cnt <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">::</span>const_iterator iter_2 <span class="token operator">=</span> svec_cnt<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// const_vector允许我们读取vector的元素，但不允许修改</span></code></pre><hr><h3 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h3><pre class=" language-cpp"><code class="language-cpp">  <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>  <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>  <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>  <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;list></span></span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> IteratorType<span class="token punctuation">,</span> <span class="token keyword">typename</span> elemType<span class="token operator">></span>  IteratorType <span class="token function">find</span><span class="token punctuation">(</span>IteratorType first<span class="token punctuation">,</span> IteratorType last<span class="token punctuation">,</span> <span class="token keyword">const</span> elemType <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> last<span class="token punctuation">)</span>          <span class="token keyword">return</span> last<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> first <span class="token operator">!=</span> last<span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>first <span class="token operator">==</span> value<span class="token punctuation">)</span>              <span class="token keyword">return</span> first<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> last<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// iterator可以适用于不同的容器</span>      <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> asize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>      vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ivec</span><span class="token punctuation">(</span>ia<span class="token punctuation">,</span> ia <span class="token operator">+</span> asize<span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ilist</span><span class="token punctuation">(</span>ia<span class="token punctuation">,</span> ia <span class="token operator">+</span> asize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> <span class="token operator">*</span>pia <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>ia<span class="token punctuation">,</span> ia <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pia <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token punctuation">;</span>      it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>ivec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ivec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator il<span class="token punctuation">;</span>      il <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>ilist<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ilist<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>il <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><hr><h2 id="所有容器的通用操作"><a href="#所有容器的通用操作" class="headerlink" title="所有容器的通用操作"></a>所有容器的通用操作</h2><ul><li><p><code>equality(==)</code> 和 <code>inequality(!=)</code>，返回<code>true</code>或<code>false</code></p></li><li><p><code>assignment(=)</code> 赋值操作，将某个容器复制给另一个容器</p></li><li><p><code>empty()</code> 操作，会在容器无任何内容时返回 <code>true</code>，否则但会 <code>false</code></p></li><li><p><code>size()</code> 返回容器内目前持有的元素个数</p></li><li><p><code>clear()</code> 删除所有元素</p></li><li><p><code>begin()</code> 返回一个<strong>iterator</strong>，指向容器的第一个元素</p></li><li><p><code>end()</code> 返回一个<strong>iterator</strong>，指向容器的<strong>最后一个元素的下一位置</strong></p></li><li><p><code>insert()</code> 将某一或某个范围内的元素插入容器</p><ul><li><code>iterator insert(iterator position, elemType value)</code>：可将value插入到position之前，并返回一个iterator，指向被插入的元素；</li><li><code>void insert(iterator position, int count, elemType value)</code>：可在position前插入count个元素，这些元素的值都为value；<ul><li><code>void insert(iterator position, iterator first, iterator last)</code>：可在position之前插入$[first, last)$所标示的个元素；</li><li><code>iterator insert(iterator position)</code>：在position前插入元素，元素的初始值为position所属类型的默认值；</li></ul></li></ul></li><li><p><code>erase()</code> 将容器内的单一元素或某一范围内的元素删除</p><ul><li><code>iterator erase(iterator position)</code>：删除position所指的元素；</li><li><code>iterator erase(iterator first, iterator last)</code>：删除$[first, last)$范围内的元素；</li></ul></li><li><p><code>push_back()</code> 在容器末端插入一个元素</p></li><li><p><code>pop_back()</code> 删除容器的最后一个元素</p></li><li><p><code>front()</code> 访问容器的第一个元素</p></li><li><p><code>back()</code> 访问容器的最后一个元素</p></li><li></li></ul><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>指针的算术运算并不适用于<code>list</code></p></li><li><pre class=" language-cpp"><code class="language-cpp">  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre></li><li><p>每个标准容器都提供一个名为 <code>begin()</code> 得操作函数，可以返回一个iterator，指向第一个元素。另一名为 <code>end()</code> 得操作会返回一个iterator，指向<strong>最后一个元素得下一位置</strong>。</p></li><li><p><code>list</code>容器实际上是一个双向链表，可以高效得进行插入和删除操作。指针的算术运算并不适用于<code>list</code>。</p><pre class=" language-cpp"><code class="language-cpp">  <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;list></span></span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以下初始化方式同样适用于其它顺序容器(vector、deque)</span>  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> c0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空链表</span>  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 建一个含有三个默认值为0的链表</span>  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 建一个含有五个元素的链表，值都是2</span>  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c3</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 建一个c2的copy链表</span>  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c4</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用c1初始化c4</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c5</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li></ul><hr><h2 id="function-object"><a href="#function-object" class="headerlink" title="function object"></a>function object</h2><pre class=" language-cpp"><code class="language-cpp">  <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;functional></span></span></code></pre><p>  某种<code>class</code>的实例对象，这类<code>class</code>对function call运算符做了重载操作，如此一来可使function object被当作一般函数来使用。[类似于Python中定义了<code>__call__()</code>方法的类的实例，该实例化的类可以当作一般函数来使用]</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul><li><p>function object 可作为某个函数的参数</p><h3 id="标准库中存在的function-object"><a href="#标准库中存在的function-object" class="headerlink" title="标准库中存在的function object"></a>标准库中存在的function object</h3></li><li><p>算数运算</p><ul><li><code>plus()</code></li><li><code>minus()</code></li><li><code>negate()</code></li><li><code>multiplies()</code></li><li><code>divides()</code></li><li><code>modules()</code></li></ul></li><li><p>关系运算</p><ul><li><code>less()</code></li><li><code>less_equal()</code></li><li><code>gerater()</code></li><li><code>gerater_equal()</code></li><li><code>equal_to()</code></li><li><code>not_equal_to()</code></li></ul></li><li><p>逻辑运算 </p><ul><li><code>logical_and()</code></li><li><code>logical_or()</code></li><li><code>logical_not()</code></li></ul></li></ul><p>  默认情况下，<code>sort()</code>会对传入的容器中的数据按照升序排列，这是因为默认情况下<code>sort()</code>使用了<code>less_than()</code>运算符。如果我们传入<code>greater_than()</code> function object，那么<code>sort()</code>就会返回一个按照降序排列的结果。</p><hr><h2 id="function-object-adapter"><a href="#function-object-adapter" class="headerlink" title="function object adapter"></a>function object adapter</h2><p><strong>function object adapter会对function object 进行修改操作。</strong></p><h3 id="binder-adapter"><a href="#binder-adapter" class="headerlink" title="binder adapter"></a><strong>binder adapter</strong></h3><p>binder adapter会将function object 的参数绑定至某个特定值，使binary(二元)function object 转化为unary(一元) function object 。</p><ul><li><p><code>binder adapter:bind1st</code>：会将指定值绑定到第一个操作数</p></li><li><p><code>binder adapter:bind2nd</code>：会将指定值绑定到第二操作数</p><p>该操作与Python中的<code>funtools.partial()</code>方法十分相似。</p></li></ul><h3 id="栗子-2"><a href="#栗子-2" class="headerlink" title="栗子"></a>栗子</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;functional></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">const</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>lt<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nvec<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter<span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iter <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span>lt<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        nvec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>        iter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nvec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>T arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec_2</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>vec_1<span class="token punctuation">,</span> value<span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>vec_2<span class="token punctuation">,</span> value<span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>结合template function，将上面的程序修改为更一般的形式：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;functional></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;list></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> inIterator<span class="token punctuation">,</span> <span class="token keyword">typename</span> outIterator<span class="token punctuation">,</span> <span class="token keyword">typename</span> elemType<span class="token punctuation">,</span> <span class="token keyword">typename</span> funType<span class="token operator">></span>outIterator <span class="token function">filter</span><span class="token punctuation">(</span>inIterator beg<span class="token punctuation">,</span> inIterator end<span class="token punctuation">,</span> outIterator out<span class="token punctuation">,</span> elemType val<span class="token punctuation">,</span> funType comp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>beg <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>beg <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token operator">*</span>out<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>beg<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 因为out为iterator类型，它负责保存所有符合条件的元素</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// array</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> save_arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">filter</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> save_arr<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> save_arr<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// vector</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">save_vec</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">filter</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// list</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ls</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">save_ls</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">filter</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_ls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="map"><a href="#map" class="headerlink" title="map"></a><strong>map</strong></h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span></code></pre><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dicts<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义了一个key为string类型，value为int类型的map</span></code></pre><p><code>map</code>有一个名为<code>first</code>的member，对应于<code>key</code>；有一个<code>second</code>的member对应于<code>value</code>。</p><h3 id="栗子-3"><a href="#栗子-3" class="headerlink" title="栗子"></a>栗子</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> words<span class="token punctuation">;</span>string a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>    words<span class="token punctuation">[</span>a<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"word # "</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-</span><span class="token operator">></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" occur "</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-</span><span class="token operator">></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" times"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果我们使用某个不存在的<code>key</code>来索引某个<code>map</code>对象，那么这个不存在的<code>key</code>会被自动加入到<code>map</code>中并设置其<code>value</code>值为0，如果只是单纯的想确认某个<code>key</code>值是否存在于<code>map</code>中要避免使用该方法，最好使用<code>find()</code>或者<code>count()</code>。</p><ul><li><p>需要判断某个<code>key</code>是否在<code>map</code>中，可以使用<code>find()</code>方法：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> words<span class="token punctuation">;</span>string a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>string key <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>    words<span class="token punctuation">[</span>a<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key # "</span> <span class="token operator">&lt;&lt;</span> key <span class="token operator">&lt;&lt;</span> <span class="token string">" in words and it's value is "</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>需要判断某个<code>key</code>是否在<code>map</code>中，还可以使用<code>count()</code>方法：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> words<span class="token punctuation">;</span>string a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>string key <span class="token operator">=</span> <span class="token string">"r"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>    words<span class="token punctuation">[</span>a<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key # "</span> <span class="token operator">&lt;&lt;</span> key <span class="token operator">&lt;&lt;</span> <span class="token string">" in words and it's value is "</span> <span class="token operator">&lt;&lt;</span> words<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key # "</span> <span class="token operator">&lt;&lt;</span> key <span class="token operator">&lt;&lt;</span> <span class="token string">" not in words"</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><hr><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span></code></pre><p>默认情况下，<code>set</code>会对传入的元素进行less-than排序(升序)：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">iset</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> iset<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> iset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>set</code>可以使用<code>insert()</code>的一元参数和双参数方法，对<code>set</code>对象插入单个元素和多个元素。</p><hr><h2 id="Iterator-Inserter"><a href="#Iterator-Inserter" class="headerlink" title="Iterator Inserter"></a><strong>Iterator Inserter</strong></h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iterator></span></span></code></pre><h3 id="三种insertion-adapter"><a href="#三种insertion-adapter" class="headerlink" title="三种insertion adapter"></a>三种insertion adapter</h3><ul><li><code>back_inserter(some_vec)</code>：会以<code>push_back()</code>函数取代所有对some_vec进行的赋值(assignment)操作</li><li><code>inserter()</code>：会以容器的<code>interser()</code>函数取代assignment操作</li><li><code>front_inserter()</code>：会以容器的<code>push_front()</code>函数取代assignment运算符[显然该insertion adapter不适用于<code>vector</code>类型]</li></ul><p><strong>以上adapter并不适用于array。</strong></p><h3 id="栗子-4"><a href="#栗子-4" class="headerlink" title="栗子"></a>栗子</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;functional></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;list></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> inIterator<span class="token punctuation">,</span> <span class="token keyword">typename</span> outIterator<span class="token punctuation">,</span> <span class="token keyword">typename</span> elemType<span class="token punctuation">,</span> <span class="token keyword">typename</span> funType<span class="token operator">></span>outIterator <span class="token function">filter</span><span class="token punctuation">(</span>inIterator beg<span class="token punctuation">,</span> inIterator end<span class="token punctuation">,</span> outIterator out<span class="token punctuation">,</span> elemType val<span class="token punctuation">,</span> funType comp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>beg <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>out<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>beg<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 因为out为iterator类型，它负责保存所有符合条件的元素</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// vector</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> save_vec<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 我们传递一个未定义size大小的save_vec给filter，并将save_vec传递给back_inserter函数，那么在filter中所有对save_vec的赋值操作均会被back_push()操作所代替</span>    <span class="token function">filter</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>save_vec<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>ix <span class="token operator">&lt;</span> save_vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> save_vec<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// list</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ls</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> save_ls<span class="token punctuation">;</span>    <span class="token function">filter</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">front_inserter</span><span class="token punctuation">(</span>save_ls<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 由于list实现的特殊性，front_inserter()不适用于vector</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> save_ls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> save_ls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="iostream-iterator"><a href="#iostream-iterator" class="headerlink" title="iostream iterator"></a><strong>iostream iterator</strong></h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iterator></span></span></code></pre><p>标准库中有供输入及输出用的iostream iterator类，分别为：<code>istream_iterator</code>和<code>ostream_iterator</code>，分别支持单一类型的元素读取和写入。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iterator></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将is定义为一个“绑定至标准输入设备”的istream_iterator</span>istream_iterator <span class="token function">is</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在定义istream_iterator时不为它指定istream对象，即代表last iterator</span>istream_iterator eof<span class="token punctuation">;</span></code></pre><h3 id="栗子-5"><a href="#栗子-5" class="headerlink" title="栗子"></a>栗子</h3><p>读取“input_file.txt”文件的内容，并写入到“output_file.txt”中</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iterator></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ifstream <span class="token function">input_file</span><span class="token punctuation">(</span><span class="token string">"./input_file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以‘r’模式打开文件</span>    ofstream <span class="token function">output_file</span><span class="token punctuation">(</span><span class="token string">"./output_file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以‘w’模式打开文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input_file <span class="token operator">||</span> <span class="token operator">!</span>output_file<span class="token punctuation">)</span><span class="token punctuation">{</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"file unable open"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    istream_iterator<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">input_stream</span><span class="token punctuation">(</span>input_file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将istream_iterator绑定到ifstream</span>    istream_iterator<span class="token operator">&lt;</span>string<span class="token operator">></span> end_of_file<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于表示istream_iterator结束的iterator</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> text<span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>input_stream<span class="token punctuation">,</span> end_of_file<span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将input_stream的指定内容传入text</span>    <span class="token function">sort</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 对text进行排序</span>    ostream_iterator<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">output_stream</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将ostream_iterator绑定到ofstream</span>    <span class="token function">copy</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output_stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将text中指定长度的内容传给ostream_iterator，ostream_iterator再将内容传入ofstream</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++, Essential C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Essential C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - ++/--</title>
      <link href="/2020/03/27/zi-jian-cao-zuo-fu/"/>
      <url>/2020/03/27/zi-jian-cao-zuo-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="–前置和后置的区别"><a href="#–前置和后置的区别" class="headerlink" title="++/–前置和后置的区别"></a>++/–前置和后置的区别</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span></code></pre><p>后置(b = a++)：会先执行赋值操作，再执行自增操作。</p><p>前置(c = ++a)：会先执行自增操作，再执行复制操作。</p><p>上述程序输出：</p><pre class=" language-cpp"><code class="language-cpp">b <span class="token operator">=</span> <span class="token number">11</span>c <span class="token operator">=</span> <span class="token number">10</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - pointer</title>
      <link href="/2020/03/27/zhi-zhen/"/>
      <url>/2020/03/27/zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h3 id="一个未指向任何对象的指针，其地址值为0，称为null指针。"><a href="#一个未指向任何对象的指针，其地址值为0，称为null指针。" class="headerlink" title="一个未指向任何对象的指针，其地址值为0，称为null指针。"></a>一个未指向任何对象的指针，其地址值为0，称为null指针。</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向int型的null指针</span></code></pre><pre class=" language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Fibonacci<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Lucas<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Pentagonal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义存放指针的vector</span><span class="token keyword">const</span> <span class="token keyword">int</span> seq_cnt <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>seq_addres<span class="token punctuation">[</span>seq_cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>$Fibonacci<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Lucas<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Pell<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Triangular<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Square<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Pentagonal<span class="token punctuation">}</span>；</code></pre><p>  <strong>如果指针定位到某个对象，则对指针进行dereference操作没有错误。但如果指针不指向任何对象，则dereference会导致未知结果的错误(该错误可能不会在编译的时候出现)。因此在对指针进行dereference操作之前必须判断其是否为null指针。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - ofstream</title>
      <link href="/2020/03/27/wen-jian-du-xie/"/>
      <url>/2020/03/27/wen-jian-du-xie/</url>
      
        <content type="html"><![CDATA[<h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span></code></pre><hr><h2 id="打开文件并写入"><a href="#打开文件并写入" class="headerlink" title="打开文件并写入"></a>打开文件并写入</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>ofstream <span class="token function">outfile</span><span class="token punctuation">(</span><span class="token string">"filename.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以“w”的方式打开文件</span>ofstream <span class="token function">outfile</span><span class="token punctuation">(</span><span class="token string">"filename.txt"</span><span class="token punctuation">,</span> ios_base<span class="token operator">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 以“a”的方式打开文件</span></code></pre><p>在写入操作之前，必须确认文件的确打开成功，可通过class object的真伪进行校验：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outfile<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>当我们以’a’模式打开文件，文件位置会位于末尾，如果我们没有重新定位，就试着读取文件内容，那么立刻会遇上“文件结束”的状况。</p><hr><h2 id="打开文件并读取"><a href="#打开文件并读取" class="headerlink" title="打开文件并读取"></a>打开文件并读取</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>ifstream <span class="token function">infile</span><span class="token punctuation">(</span><span class="token string">"filename.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同样的，使用该文件之前需要先判断是否成功打开文件：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outfile<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><hr><h2 id="同时对同一个文件进行读写"><a href="#同时对同一个文件进行读写" class="headerlink" title="同时对同一个文件进行读写"></a>同时对同一个文件进行读写</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span><span class="token comment" spellcheck="true">// ...</span>fstream <span class="token function">iofile</span><span class="token punctuation">(</span><span class="token string">"filename.txt"</span><span class="token punctuation">,</span> ios_base<span class="token operator">::</span>in<span class="token operator">|</span>ios_base<span class="token operator">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - random</title>
      <link href="/2020/03/27/sui-ji-shu-sheng-cheng/"/>
      <url>/2020/03/27/sui-ji-shu-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span></code></pre><hr><h2 id="函数用法"><a href="#函数用法" class="headerlink" title="函数用法"></a>函数用法</h2><ul><li><p><code>srand()</code>用来设置 <code>rand()</code>产生随机数时的随机数种子。参数seed必须是个整数，如果每次 seed 都设相同值，<code>rand()</code>所产生的随机数值每次就会一样。用户未设定随机数种子时，系统默认的随机数种子为1。</p></li><li><p>rand() 返回一随机数值的范围在 0 至 RAND_MAX 间。RAND_MAX 的范围最少是在 32767(<code>int</code>所能表示的最大整数)之间。用<code>unsigned int</code>双字节是65535，四字节是4294967295的整数范围。0~RAND_MAX每个数字被选中的机率是相同的。<code>rand()</code>产生的是伪随机数字，每次执行时是相同的; 若要不同, 用函数<code>srand()</code>初始化它。</p></li><li></li></ul><hr><h2 id="产生一定范围随机数"><a href="#产生一定范围随机数" class="headerlink" title="产生一定范围随机数"></a>产生一定范围随机数</h2><ul><li><p>要取得 $[a,b)$ 的随机整数，使用 <code>(rand() % (b-a)) + a;</code></p></li><li><p>要取得 $[a,b]$ 的随机整数，使用 <code>(rand() % (b-a+1)) + a;</code></p></li><li><p>要取得 $(a,b]$ 的随机整数，使用 <code>(rand() % (b-a)) + a + 1;</code></p></li><li><p>通用公式: <code>a + rand() % n；</code>其中的 $a$ 是起始值，$n$ 是整数的范围。</p></li><li><p>要取得 $a$ 到 $b$ 之间的随机整数，另一种表示：<code>a + (int)b * rand() / (RAND_MAX + 1)</code>。</p></li><li><p>要取得 $0～1$ 之间的浮点数，可以使用 <code>rand() / double(RAND_MAX)</code>。</p></li><li></li></ul><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.runoob.com/w3cnote/cpp-rand-srand.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/cpp-rand-srand.html</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - function</title>
      <link href="/2020/03/27/han-shu/"/>
      <url>/2020/03/27/han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数的定义必须包含4部分：</p><ol><li>返回类型</li><li>函数名</li><li>参数列表<ul><li>参数类型</li><li>参数名称</li></ul></li><li>函数体</li></ol><hr><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数声明必须包含：</p><ul><li>函数返回类型</li><li>函数参数类型</li><li>参数名可写可不写</li></ul><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>函数必须先被声明，然后才能被调用。函数的声明让编译器得以检查后续出现的使用方式是否正确——是否有足够的参数、参数类型是否正确，等等。函数声明不必提供函数体，但必须指明返回类型、函数名、以及参数列表。</p></li><li><p>非void函数必须有return语句。</p></li><li><p>函数内定义的对象，只存在于函数执行期间(static除外)，函数执行完便会被丢弃，local object也不复存在，如果将这些对象的地址返回，会导致运行出现错误。</p></li></ul><hr><h2 id="终止程序-exit"><a href="#终止程序-exit" class="headerlink" title="终止程序(exit)"></a>终止程序(exit)</h2><p>必须传给 <code>exit()</code> 一个值，此值将成为程序结束时的状态值。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token comment" spellcheck="true">// ...</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...</span></code></pre><hr><h2 id="查询内置数值类型的表示范围"><a href="#查询内置数值类型的表示范围" class="headerlink" title="查询内置数值类型的表示范围"></a>查询内置数值类型的表示范围</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;limits></span></span><span class="token keyword">int</span> max_int <span class="token operator">=</span> numeric_limits<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> min_dbl <span class="token operator">=</span> numeric_limits<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>两种参数传递方式：</p><ol><li>传址(by reference) —— 类似于Python中的”in-place”</li><li>传值(by value)</li></ol><p><strong>当我们调用一个函数时，会在内存中建立一块特殊的区域，称为“program stack”。这块特殊区域提供了每个函数参数的存储空间。它也提供了函数所定义的每个对象的内存空间——我们将这些对象称为local object。一旦函数完成，这块内存就会被释放掉，或者说是从程序堆栈中被pop出来。</strong></p><p><strong>当我们以by reference方式将对象作为函数参数传入时，对象本身并不会复制出另一份——复制的是对象的地址。函数中对该对象进行的任何操作，都相当于是对传入的对象进行间接的操作。将参数声明为reference的理由之一是，希望得以直接对所传入的对象进行修改；将参数声明为reference的第二个理由是，降低复制大型对象的额外负担。</strong></p><p>当我们以传值的方式调用函数，传递给函数的参数会被复制一份，原参数对象和副本参数之间没有任何关联。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstddef></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印函数；直接传入打印对象的地址，速度会更快；使不使用const都不会对程序的运行造成影响。这里加上const，是为了向阅读此程序的人说明，虽然这个函数传入的是对象的reference，但在这个函数里面我们并不打算对其进行修改。</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 交换操作</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 冒泡排序</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>val_1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>val_2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> val_1<span class="token punctuation">;</span>    val_1 <span class="token operator">=</span> val_2<span class="token punctuation">;</span>    val_2 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t jx <span class="token operator">=</span> ix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> jx <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>jx<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">></span> vec<span class="token punctuation">[</span>jx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span>jx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"vector before sort: "</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token function">bubble_sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"after sort: "</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的程序为冒泡排序算法，其中用户创建的vector必须以“by reference”的方式传递给 <code>bubble_sort()</code> 函数，在 <code>bubble_sort()</code> 内又必须以“by reference”的参数传递方式将参数传递给函数 <code>swap()</code>。</p><hr><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><ul><li><strong>默认值的解析(resolve)操作由最右边开始进行。如果我们为某个参数提供了默认值，那么这一参数右侧的所有参数都必须也具有默认参数值才行。</strong></li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 错误的默认参数值书写</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os <span class="token operator">=</span> count<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><ul><li><strong>默认值只能够指定一次，可以在函数声明处，也可以在函数定义处，但不能够在两个地方都指定。</strong></li></ul><hr><h2 id="作用域及范围"><a href="#作用域及范围" class="headerlink" title="作用域及范围"></a>作用域及范围</h2><ul><li>对象在程序内的存活区域称为该对象的scope</li><li>对象如果在函数以外声明，具有所谓的file scope。具有file scope的对象，从其声明点至文件末尾都是可见的。file scope内的对象也具备所谓的static extent，意即该对象的内存在main()开始执行之前便已经分配好了，可以一直存在到程序结束。</li><li>在函数内部声明的的变量，为局部非静态对象，其在每次调用函数时建立，并在函数结束时被丢弃。</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span><span class="token function">fibon_seq</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> elems<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部非静态对象</span>    <span class="token comment" spellcheck="true">// ... (对elems里的元素进行增/删/改等操作)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>elems<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是错误的，因为elems所在的内存会在函数执行完毕后被销毁，因此自然也就无法得到其地址</span><span class="token punctuation">}</span></code></pre><ul><li>局部静态对象在其定义出生成，其所处的内存空间，即使在不同的函数调用过程中，也依然持续存在。</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span><span class="token function">fibon_seq</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> elems<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部静态变量</span>    <span class="token comment" spellcheck="true">// ... (对elems里的元素进行增/删/改等操作)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>elems<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确，elems为局部静态对象，其内存在整个main()函数执行结束之前都会一直存在</span><span class="token punctuation">}</span></code></pre><hr><h2 id="inline函数"><a href="#inline函数" class="headerlink" title="inline函数"></a>inline函数</h2><p>声明为inline的函数，在编译时会将其编译到其被调用的函数内，从而达到形式上的分离而实质上的统一。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 定义inline函数</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>string input_type<span class="token punctuation">,</span> string msg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明inline函数</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h2 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h2><p>参数列表不同(可以是参数类型不同，也可以是参数数量不同)的两个或多个函数，可以拥有相同的函数名称。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> val_1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val_2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max_val <span class="token operator">=</span> <span class="token punctuation">(</span>val_1 <span class="token operator">></span> val_2<span class="token punctuation">)</span> <span class="token operator">?</span> val_1 <span class="token operator">:</span> val_2<span class="token punctuation">;</span>    <span class="token keyword">return</span> max_val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">&amp;</span> val_1<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> val_2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> max_val <span class="token operator">=</span> <span class="token punctuation">(</span>val_1 <span class="token operator">></span> val_2<span class="token punctuation">)</span> <span class="token operator">?</span> val_1 <span class="token operator">:</span> val_2<span class="token punctuation">;</span>        <span class="token keyword">return</span> max_val<span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">max</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str_1<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> str_2<span class="token punctuation">)</span><span class="token punctuation">{</span>    string max_str <span class="token operator">=</span> <span class="token punctuation">(</span>str_1 <span class="token operator">></span> str_2<span class="token punctuation">)</span> <span class="token operator">?</span> str_1 <span class="token operator">:</span> str_2<span class="token punctuation">;</span>    <span class="token keyword">return</span> max_str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val_1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val_2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"two int: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>val_1<span class="token punctuation">,</span> val_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    string str_1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    string str_2 <span class="token operator">=</span> <span class="token string">"abd"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"two string: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>str_1<span class="token punctuation">,</span> str_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">double</span> flt_1 <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> flt_2 <span class="token operator">=</span> <span class="token number">3.6</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"two double: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>flt_1<span class="token punctuation">,</span> flt_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>程序代码的主体不改变，仅仅改变其中用到的数据类型。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> elemType<span class="token operator">></span>elemType <span class="token function">max</span><span class="token punctuation">(</span>elemType<span class="token operator">&amp;</span> val_1<span class="token punctuation">,</span> elemType<span class="token operator">&amp;</span> val_2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val_1 <span class="token operator">&lt;</span> val_2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> val_2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> val_1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val_1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val_2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"two int: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>val_1<span class="token punctuation">,</span> val_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    string str_1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    string str_2 <span class="token operator">=</span> <span class="token string">"abd"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"two string: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>str_1<span class="token punctuation">,</span> str_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">double</span> flt_1 <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> flt_2 <span class="token operator">=</span> <span class="token number">3.6</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"two double: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>flt_1<span class="token punctuation">,</span> flt_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>个人感觉<code>template&lt;typename elemType&gt;</code>有点类似于Python中的格式化字符串的意思，只不过它将我们定义的elemType替换为某种数据类型，该数据类型根据传入的参数中第一个遇到elemType的参数决定。</p><p>例如当执行<code>max(val_1, val_2)</code>，由于函数<code>max()</code>的第一个位置参数就为elemType所定义，而我们传入的<code>val_1</code>的数据类型为<code>int</code>，因此在本次调用中编译器就会将elemType当作<code>int</code>，如果我们传入的<code>val_2</code>不是<code>int</code>型的数据，那么就不能通过编译。</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指针'fun_ptr'指向返回值为(某个类型)指针的函数</span></code></pre><p>函数指针<code>fun_ptr</code>指向一个返回类型为<code>const vector&lt;int&gt;*</code>(表示一种指针)，并只含一个<code>int</code>类型的参数的函数。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - 操纵符</title>
      <link href="/2020/03/27/cao-zong-fu/"/>
      <url>/2020/03/27/cao-zong-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="endl"><a href="#endl" class="headerlink" title="endl"></a>endl</h2><p>endl会插入一个换行符，并清除缓冲区的内容</p><h2 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h2><p>以16进制显示整数</p><h2 id="oct"><a href="#oct" class="headerlink" title="oct"></a>oct</h2><p>以8进制显示整数</p><h2 id="setprecision-n"><a href="#setprecision-n" class="headerlink" title="setprecision(n)"></a>setprecision(n)</h2><p>设定浮点数的显示精度为n</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - Vector</title>
      <link href="/2020/03/27/vector/"/>
      <url>/2020/03/27/vector/</url>
      
        <content type="html"><![CDATA[<h2 id="vector初始化"><a href="#vector初始化" class="headerlink" title="vector初始化"></a>vector初始化</h2><h3 id="方法一：每个元素单独初始化"><a href="#方法一：每个元素单独初始化" class="headerlink" title="方法一：每个元素单独初始化"></a>方法一：每个元素单独初始化</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">some_vec_1</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>some_vec_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>some_vec_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>some_vec_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>some_vec_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>some_vec_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><h3 id="方法二：用一个已经初始化的array"><a href="#方法二：用一个已经初始化的array" class="headerlink" title="方法二：用一个已经初始化的array"></a>方法二：用一个已经初始化的array</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>some_arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">some_vec_2</span><span class="token punctuation">(</span>some_arr<span class="token punctuation">,</span> some_arr <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>初始化vector时传给它的两个值为some_arr的第一个和最后一个元素的地址。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - array</title>
      <link href="/2020/03/27/array/"/>
      <url>/2020/03/27/array/</url>
      
        <content type="html"><![CDATA[<h2 id="arry初始化"><a href="#arry初始化" class="headerlink" title="arry初始化"></a>arry初始化</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> some_arr_1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所有n个元素全部初始化为0</span><span class="token keyword">int</span> some_arr_2<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果m>3，那么剩余的元素初始化为0</span><span class="token keyword">int</span> some_arr_3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 编译器会根据初始值的数量，自行计算array的大</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2020/03/11/hexo-ge-ren-bo-ke-da-jian-guo-cheng-md/"/>
      <url>/2020/03/11/hexo-ge-ren-bo-ke-da-jian-guo-cheng-md/</url>
      
        <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a></li><li><a href="nodejs.org">nodejs</a></li></ul><hr><h2 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h2><ul><li>node -v(nodejs)</li><li>git –version(git)</li></ul><hr><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><ul><li>git –global user.email youremailaddress</li><li>git –global user.name yourname</li></ul><hr><h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><ul><li>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org(需要一些时间)" target="_blank" rel="noopener">https://registry.npm.taobao.org(需要一些时间)</a></li><li>cnpm -v(检查cnpm是否安装成功)</li></ul><hr><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul><li>cnpm install -g hexo-cli</li><li>hexo -v(检查hexo是否安装成功)</li></ul><hr><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul><li>创建一个空文件夹：”Blog“(一定要是空文件夹，不能包含任何文件以及隐藏文件)</li><li>cd到Blog</li><li>hexo init(初始化博客)</li><li>hexo s(本地启动hexo博客，浏览器输入:<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>)</li></ul><hr><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><ul><li>hexo n “your blog”(创建markdown博客文章)<ul><li>新创建的markdown文章放在：xxx/Blog/source/_posts，可使用文本编辑器完善文章内容</li></ul></li><li>cd xxx/Blog</li><li>hexo clean(清理)</li><li>hexo g(生成新创建的文章)</li><li>hexo s(重新启动hexo)</li></ul><hr><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><ul><li>在GitHub上创建一个新的仓库，仓库名必须为your-github-name.github.io</li><li>cd xxx/Blog</li><li>cnpm install –save hexo-deployer-git</li><li>编辑”xxx/Blog”目录下的”_config.yml”文件，修改”# Deploymean”配置项为<pre class=" language-bash"><code class="language-bash">deploy: type: <span class="token function">git</span> repo: https://github.com/your-github-name/your-github-name.github.io.git bransh: master</code></pre></li><li>hexo clean</li><li>hexo d(部署命令)</li><li>浏览器地址栏输入”<a href="https://your-github-name.github.io&quot;，即可看到浏览你的博客" target="_blank" rel="noopener">https://your-github-name.github.io"，即可看到浏览你的博客</a></li></ul><hr><h2 id="更换主题-以github上的主题为例"><a href="#更换主题-以github上的主题为例" class="headerlink" title="更换主题(以github上的主题为例)"></a>更换主题(以github上的主题为例)</h2><ul><li>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia(下载主题文件到本地)</li><li>编辑”xxx/Blog”目录下的”_config.yml”文件，修改”# Extension”配置项为<pre class=" language-bash"><code class="language-bash">theme: yilia</code></pre></li><li>hexo clean(清理)</li><li>hexo g(生成)</li><li>hexo s(启动)</li><li>hexo d(推送到GitHub)</li></ul><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.bilibili.com/video/av44544186/?spm_id_from=333.788.videocard.0" target="_blank" rel="noopener">https://www.bilibili.com/video/av44544186/?spm_id_from=333.788.videocard.0</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
